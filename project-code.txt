app\api\projects\route.ts
import { NextResponse } from 'next/server';
import { currentUser, clerkClient } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  created_at: string;
  deadline: string;
  author: string;
  authorName: string;
};

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const limit = parseInt(searchParams.get('limit') || '0') || 0;

    await connectDB();

    let sql = `SELECT * FROM projects ORDER BY created_at DESC`;
    if (limit > 0) {
      sql += ` LIMIT ${limit}`;
    }

    const result = await db.query<Project[]>(sql);
    let projects: Project[] = [];
    if (Array.isArray(result)) {
      projects = Array.isArray(result[0]) ? result[0] : result;
    } else if (Array.isArray((result[0] as any)?.result)) {
      projects = (result[0] as { result: Project[] }).result;
    }

    const enrichedProjects = await Promise.all(
      projects.map(async (project) => {
        try {
          const clerk = await clerkClient();
          const clerkUser = await clerk.users.getUser(project.author);
          const authorName =
            clerkUser.username ||
            clerkUser.firstName ||
            clerkUser.fullName ||
            (clerkUser.emailAddresses && clerkUser.emailAddresses.length > 0
              ? clerkUser.emailAddresses[0].emailAddress
              : 'Unknown User');
          return { ...project, authorName };
        } catch (error: any) {
          console.error(`Error fetching user ${project.author}:`, error.message);
          return { ...project, authorName: 'Unknown User' };
        }
      })
    );

    return NextResponse.json(enrichedProjects, { status: 200 });
  } catch (error: any) {
    console.error('FETCH PROJECTS ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to fetch projects', details: error.message },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { name, description, summary, deadline } = await request.json();
    if (!name || !summary || !deadline) {
      return NextResponse.json({ error: 'Name, summary, and deadline are required' }, { status: 400 });
    }

    await connectDB();
    const newProject = await db.create('projects', {
      name,
      description: description || '',
      summary,
      deadline: new Date(deadline),
      author: user.id,
      created_at: new Date(),
    });

    return NextResponse.json(newProject, { status: 201 });
  } catch (error: any) {
    console.error('CREATE PROJECT ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to create project', details: error.message },
      { status: 500 }
    );
  }
}

export async function DELETE(req: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { id } = await params;
    await connectDB();
    const projectId = new RecordId('projects', id);
    const project = await db.select(projectId);
    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }

    if (project.author !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    await db.delete(projectId);
    return NextResponse.json({ message: 'Project deleted' }, { status: 200 });
  } catch (error: any) {
    console.error('DELETE PROJECT ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to delete project', details: error.message },
      { status: 500 }
    );
  }
}

export async function PATCH(req: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { id } = await params;
    const { name, description, summary, deadline } = await req.json();
    if (!name || !summary || !deadline) {
      return NextResponse.json({ error: 'Name, summary, and deadline are required' }, { status: 400 });
    }

    await connectDB();
    const projectId = new RecordId('projects', id);
    const project = await db.select(projectId);
    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }

    if (project.author !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    const updatedProject = await db.merge(projectId, {
      name,
      description: description || '',
      summary,
      deadline: new Date(deadline),
    });

    return NextResponse.json(updatedProject, { status: 200 });
  } catch (error: any) {
    console.error('UPDATE PROJECT ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to update project', details: error.message },
      { status: 500 }
    );
  }
}

app\api\projects\[id]\delete\route.ts
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Project = {
  id: string;
  name: string;
  description: string;
  progress: number;
  author: string;
  created_at: string;
};

export async function DELETE(req: Request, { params }: { params: { id: string } }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'کاربر احراز هویت نشده' }, { status: 401 });
    }

    await connectDB();
    const { id } = params;
    const projectId = new RecordId('projects', id);

    console.log('DELETE ID =>', id);
    console.log('RECORD ID =>', projectId.toString());

    const project = await db.select<Project>(projectId);
    if (!project) {
      return NextResponse.json({ error: 'پروژه یافت نشد' }, { status: 404 });
    }
    if (project.author !== user.id) {
      return NextResponse.json({ error: 'عدم دسترسی' }, { status: 403 });
    }

    console.log(`Before deleting project: ${projectId}`);
    await db.delete(projectId);
    console.log('DELETE RESULT =>', 'Project deleted');

    return NextResponse.json({ message: 'پروژه با موفقیت حذف شد' }, { status: 200 });
  } catch (error: any) {
    console.error('DELETE ERROR =>', error.message);
    return NextResponse.json(
      { error: 'خطا در حذف پروژه', details: error.message },
      { status: 500 }
    );
  }
}

app\api\projects\[id]\put\route.ts
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  author: string;
  created_at: string;
  deadline: string;
};

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    await connectDB();
    const { id } = params;
    const projectId = new RecordId('projects', id);

    const { name, description, summary, deadline } = await req.json();
    if (!name || !description || !summary || !deadline) {
      return NextResponse.json({ error: 'Name, description, summary, and deadline are required' }, { status: 400 });
    }

    const project = await db.select<Project>(projectId);
    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }
    if (project.author !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    const updatedProject = await db.merge<Project>(projectId, {
      name,
      description,
      summary,
      deadline: new Date(deadline),
    });

    return NextResponse.json(updatedProject, { status: 200 });
  } catch (error: any) {
    console.error('UPDATE ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to update project', details: error.message },
      { status: 500 }
    );
  }
}

app\api\projects\[id]\route.ts
import { NextResponse } from 'next/server';
import { currentUser, clerkClient } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  author: string;
  authorName: string;
  created_at: string;
  deadline: string;
};

export async function GET(req: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    console.log('Requested GET ID:', id);

    await connectDB();
    const projectId = new RecordId('projects', id);
    console.log('Constructed RecordId:', projectId.toString());

    const project = await db.select<Project>(projectId);
    console.log('Selected Project:', project);

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }

    const clerk = await clerkClient();
    const clerkUser = await clerk.users.getUser(project.author);
    const authorName =
      clerkUser.username ||
      clerkUser.firstName ||
      clerkUser.fullName ||
      (clerkUser.emailAddresses && clerkUser.emailAddresses.length > 0
        ? clerkUser.emailAddresses[0].emailAddress
        : 'Unknown User');

    return NextResponse.json({ ...project, authorName }, { status: 200 });
  } catch (error: any) {
    console.error('GET PROJECT ERROR:', {
      message: error.message,
      stack: error.stack,
      params,
    });
    return NextResponse.json(
      { error: 'Failed to fetch project', details: error.message },
      { status: 500 }
    );
  }
}

export async function DELETE(req: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { id } = await params;
    console.log('Requested DELETE ID:', id);

    await connectDB();
    const projectId = new RecordId('projects', id);
    console.log('Constructed RecordId:', projectId.toString());

    const project = await db.select(projectId);
    console.log('Selected Project:', project);

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }

    if (project.author !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    await db.delete(projectId);
    console.log('Project deleted successfully:', projectId.toString());

    return NextResponse.json({ message: 'Project deleted successfully' }, { status: 200 });
  } catch (error: any) {
    console.error('DELETE PROJECT ERROR:', {
      message: error.message,
      stack: error.stack,
      params,
    });
    return NextResponse.json(
      { error: 'Failed to delete project', details: error.message },
      { status: 500 }
    );
  }
}

app\api\tasks\route.ts
import { NextResponse } from 'next/server';
import { currentUser, clerkClient } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Task = {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed';
  project: string;
  created_at: string;
  deadline: string;
  assignee: string;
  assigneeName: string;
};

export async function POST(request: Request) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { title, description, projectId, deadline, assignee } = await request.json();
    if (!title || !projectId || !deadline || !assignee) {
      return NextResponse.json({ error: 'Title, project ID, deadline, and assignee are required' }, { status: 400 });
    }

    await connectDB();
    const project = await db.select(new RecordId('projects', projectId));
    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }
    if (project.author !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Validate deadline
    if (new Date(deadline) > new Date(project.deadline as string )) {
      return NextResponse.json({ error: 'Task deadline cannot be after project deadline' }, { status: 400 });
    }

    // Validate assignee
    const clerk = await clerkClient();
    const assigneeUser = await clerk.users.getUser(assignee);
    if (!assigneeUser) {
      return NextResponse.json({ error: 'Assignee not found' }, { status: 400 });
    }

    const newTask = await db.create('tasks', {
      title,
      description: description || '',
      status: 'pending',
      project: new RecordId('projects', projectId),
      created_at: new Date(),
      deadline: new Date(deadline),
      assignee,
    });

    return NextResponse.json(newTask, { status: 201 });
  } catch (error: any) {
    console.error('CREATE TASK ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to create task', details: error.message },
      { status: 500 }
    );
  }
}

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const projectId = searchParams.get('projectId');

    if (!projectId) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 });
    }

    await connectDB();
    const tasks = await db.query<Task[]>(`SELECT * FROM tasks WHERE project = projects:${projectId}`);
    let taskList: Task[] = [];
    if (Array.isArray(tasks)) {
      taskList = Array.isArray(tasks[0]) ? tasks[0] : tasks;
    } else if (Array.isArray((tasks[0] as any)?.result)) {
      taskList = (tasks[0] as { result: Task[] }).result;
    }

    // Enrich tasks with assignee names
    const clerk = await clerkClient();
    const enrichedTasks = await Promise.all(
      taskList.map(async (task) => {
        try {
          const assigneeUser = await clerk.users.getUser(task.assignee);
          const assigneeName =
            assigneeUser.username ||
            assigneeUser.firstName ||
            assigneeUser.fullName ||
            (assigneeUser.emailAddresses && assigneeUser.emailAddresses.length > 0
              ? assigneeUser.emailAddresses[0].emailAddress
              : 'Unknown User');
          return { ...task, assigneeName };
        } catch (error: any) {
          console.error(`Error fetching assignee ${task.assignee}:`, error.message);
          return { ...task, assigneeName: 'Unknown User' };
        }
      })
    );

    return NextResponse.json(enrichedTasks, { status: 200 });
  } catch (error: any) {
    console.error('FETCH TASKS ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to fetch tasks', details: error.message },
      { status: 500 }
    );
  }
}

app\api\tasks\[id]\status\route.ts
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';

type Task = {
  id: string;
  status: string;
  project: string;
  assignee: string;
};

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { status } = await req.json();
    if (!['pending', 'in_progress', 'completed'].includes(status)) {
      return NextResponse.json({ error: 'Invalid status' }, { status: 400 });
    }

    await connectDB();
    const taskId = new RecordId('tasks', params.id);
    const task = await db.select<Task>(taskId);
    if (!task) {
      return NextResponse.json({ error: 'Task not found' }, { status: 404 });
    }

    // Check if user is project author or assignee
    const project = await db.select(new RecordId('projects', task.project.split(':')[1]));
    if (project.author !== user.id && task.assignee !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    const updatedTask = await db.merge<Task>(taskId, { status });
    return NextResponse.json(updatedTask, { status: 200 });
  } catch (error: any) {
    console.error('UPDATE TASK STATUS ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to update task status', details: error.message },
      { status: 500 }
    );
  }
}

app\api\users\route.ts
import { NextResponse } from 'next/server';
import { clerkClient } from '@clerk/nextjs/server';

export async function GET() {
  try {
    const clerk = await clerkClient();
    const users = await clerk.users.getUserList();
    const userList = users.data.map(user => ({
      id: user.id,
      name: user.username ||
        user.firstName ||
        user.fullName ||
        (user.emailAddresses && user.emailAddresses.length > 0
          ? user.emailAddresses[0].emailAddress
          : 'Unknown User'),
    }));
    return NextResponse.json(userList, { status: 200 });
  } catch (error: any) {
    console.error('FETCH USERS ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to fetch users', details: error.message },
      { status: 500 }
    );
  }
}

app\dashboard\dashboard.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px); /* Adjust for header height */
}

.title {
  font-size: 2rem;
  margin-bottom: 2rem;
  color: #1a202c;
  font-weight: 700;
}

.projectGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
}

.addProjectCard {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #f9fafb;
  border: 2px dashed #cbd5e0;
  border-radius: 8px;
  padding: 1rem;
  text-decoration: none;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}

.addProjectCard:hover {
  background-color: #edf2f7;
  border-color: #2b6cb0;
}

.addIcon {
  color: #2b6cb0;
  margin-bottom: 0.5rem;
}

.addText {
  color: #2d3748;
  font-size: 1rem;
  font-weight: 600;
}

.signInPrompt {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  text-align: center;
  padding: 2rem;
  background-color: #f9fafb;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.promptTitle {
  font-size: 1.8rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.promptText {
  font-size: 1.2rem;
  color: #4a5568;
  margin-bottom: 2rem;
}

.signInButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.signInButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .promptTitle {
    font-size: 1.5rem;
  }

  .promptText {
    font-size: 1rem;
  }

  .addProjectCard {
    padding: 0.75rem;
  }

  .addText {
    font-size: 0.9rem;
  }
}

app\dashboard\edit-project\[id]\page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import styles from "../../../../styles/newProject.module.css";

export default function EditProject() {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [summary, setSummary] = useState("");
  const [deadline, setDeadline] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const { id } = useParams();

  useEffect(() => {
    async function getProject() {
      try {
        const res = await fetch(`/api/projects/${id}`);
        if (!res.ok) {
          throw new Error("Project not found");
        }
        const data = await res.json();
        setName(data.name);
        setDescription(data.description);
        setSummary(data.summary);
        setDeadline(data.deadline ? new Date(data.deadline).toISOString().split('T')[0] : '');
        setLoading(false);
      } catch (err: any) {
        setError(err.message);
        setLoading(false);
      }
    }
    getProject();
  }, [id]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const res = await fetch(`/api/projects/${id}/put`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, description, summary, deadline }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to update project");
      }
      router.push("/dashboard");
    } catch (err: any) {
      setError(err.message);
      setLoading(false);
    }
  }

  if (loading) {
    return <div className={styles.container}>Loading...</div>;
  }

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Edit Project</h1>
      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.formGroup}>
          <label className={styles.label}>Project Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className={styles.input}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Description</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className={styles.textarea}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Summary (max 2 lines)</label>
          <textarea
            value={summary}
            onChange={(e) => setSummary(e.target.value)}
            className={styles.textarea}
            maxLength={100}
            rows={2}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Deadline</label>
          <input
            type="date"
            value={deadline}
            onChange={(e) => setDeadline(e.target.value)}
            className={styles.input}
            required
          />
        </div>
        {error && <p className={styles.error}>{error}</p>}
        <button type="submit" className={styles.submitButton} disabled={loading}>
          {loading ? "Saving..." : "Save Changes"}
        </button>
      </form>
    </div>
  );
}

app\dashboard\new-project\page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import styles from "../../../styles/newProject.module.css";

export default function NewProject() {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [summary, setSummary] = useState("");
  const [deadline, setDeadline] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const res = await fetch("/api/projects", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, description, summary, deadline }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to create project");
      }
      router.push("/dashboard");
    } catch (err: any) {
      setError(err.message);
      setLoading(false);
    }
  }

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Create New Project</h1>
      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.formGroup}>
          <label className={styles.label}>Project Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className={styles.input}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Description</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className={styles.textarea}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Summary (max 2 lines)</label>
          <textarea
            value={summary}
            onChange={(e) => setSummary(e.target.value)}
            className={styles.textarea}
            maxLength={100}
            rows={2}
            required
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Deadline</label>
          <input
            type="date"
            value={deadline}
            onChange={(e) => setDeadline(e.target.value)}
            className={styles.input}
            required
          />
        </div>
        {error && <p className={styles.error}>{error}</p>}
        <button type="submit" className={styles.submitButton} disabled={loading}>
          {loading ? "Creating..." : "Create Project"}
        </button>
      </form>
    </div>
  );
}

app\dashboard\new-project\styles.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
}

.title {
  font-size: 2rem;
  margin-bottom: 2rem;
  color: #1a202c;
  font-weight: 700;
}

.placeholderText {
  font-size: 1.2rem;
  color: #4a5568;
}

.signInPrompt {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  text-align: center;
  padding: 2rem;
  background-color: #f9fafb;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.promptTitle {
  font-size: 1.8rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.prompt-text {
  font-size: 1.2rem;
  color: #4a69;
  margin-bottom: 2rem;
}

.signInButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.signInButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .title {
    font-size: 1.8rem;
  }

  .placeholderText {
    font-size: 1rem;
  }

  .promptTitle {
    font-size: 1.5rem;
  }

  .promptText {
    font-size: 1rem;
  }
}

app\dashboard\page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useUser } from "@clerk/nextjs";
import ProjectCard from "./ProjectCard";
import { Plus } from "lucide-react";
import styles from "../../styles/dashboard.module.css";

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  author: string;
  authorName: string;
  created_at: string;
  deadline: string;
};

export default function Dashboard() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const router = useRouter();
  const { user } = useUser();

  useEffect(() => {
    async function fetchProjects() {
      if (!user) return;
      try {
        const res = await fetch("/api/projects");
        if (!res.ok) {
          throw new Error("Failed to fetch projects");
        }
        const data = await res.json();
        setProjects(data);
        setLoading(false);
      } catch (err: any) {
        setError(err.message);
        setLoading(false);
      }
    }
    fetchProjects();
  }, [user]);

  if (!user) {
    return <div className={styles.container}>Please sign in to view your projects</div>;
  }

  if (loading) {
    return <div className={styles.container}>Loading projects...</div>;
  }

  if (error) {
    return <div className={styles.container}>Error: {error}</div>;
  }

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Your Projects</h1>
      <div className={styles.projectsGrid}>
        {projects.map((project) => (
          <ProjectCard key={project.id} project={project} />
        ))}
        <div
          className={styles.addProjectCard}
          onClick={() => router.push("/dashboard/new-project")}
        >
          <Plus className={styles.addIcon} />
          <span className={styles.addText}>Create New Project</span>
        </div>
      </div>
    </div>
  );
}

app\dashboard\ProjectCard.tsx
"use client";

import { useRouter } from "next/navigation";
import { useUser } from "@clerk/nextjs";
import styles from "../../styles/ProjectCard.module.css";

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  author: string;
  authorName: string;
  created_at: string;
  deadline: string;
};

export default function ProjectCard({ project }: { project: Project }) {
  const router = useRouter();
  const { user } = useUser();

  function handleViewDetails() {
    const projectId = project.id.includes(':') ? project.id.split(':')[1] : project.id;
    console.log('Navigating to project details with ID:', projectId);
    router.push(`/dashboard/projects/${projectId}`);
  }

  async function handleEdit() {
    const projectId = project.id.includes(':') ? project.id.split(':')[1] : project.id;
    router.push(`/dashboard/edit-project/${projectId}`);
  }

  async function handleDelete() {
    if (!confirm("Are you sure you want to delete this project?")) return;
    try {
      const projectId = project.id.includes(':') ? project.id.split(':')[1] : project.id;
      console.log('Sending DELETE request for ID:', projectId);
      const res = await fetch(`/api/projects/${projectId}`, {
        method: "DELETE",
      });
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.details || "Failed to delete project");
      }
      router.refresh();
      alert("Project deleted successfully");
    } catch (error: any) {
      console.error('Client-side DELETE error:', error.message);
      alert(`Error: ${error.message}`);
    }
  }

  const isAuthor = user && user.id === project.author;

  return (
    <div className={styles.card}>
      <div>
        <h2 className={styles.title}>{project.name}</h2>
        <p className={styles.summary}>{project.summary}</p>
        <p className={styles.meta}>
          <strong>Author:</strong> {project.authorName}
        </p>
        <p className={styles.meta}>
          <strong>Created:</strong> {new Date(project.created_at).toLocaleDateString('en-US')}
        </p>
        <p className={styles.meta}>
          <strong>Deadline:</strong> {new Date(project.deadline).toLocaleDateString('en-US')}
        </p>
      </div>
      <div className={styles.buttonGroup}>
        <button className={styles.viewButton} onClick={handleViewDetails}>
          View Details
        </button>
        {isAuthor && (
          <div className={styles.actionButtons}>
            <button className={styles.editButton} onClick={handleEdit}>
              Edit
            </button>
            <button className={styles.deleteButton} onClick={handleDelete}>
              Delete
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

app\dashboard\projects\[id]\page.tsx
"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import { useUser } from "@clerk/nextjs";
import styles from "../../../../styles/projectDetails.module.css";

type Project = {
  id: string;
  name: string;
  description: string;
  summary: string;
  author: string;
  authorName: string;
  created_at: string;
  deadline: string;
};

type Task = {
  id: string;
  title: string;
  description: string;
  status: string;
  created_at: string;
  deadline: string;
  assignee: string;
  assigneeName: string;
};

type User = {
  id: string;
  name: string;
};

export default function ProjectDetails() {
  const [project, setProject] = useState<Project | null>(null);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTaskTitle, setNewTaskTitle] = useState("");
  const [newTaskDescription, setNewTaskDescription] = useState("");
  const [newTaskDeadline, setNewTaskDeadline] = useState("");
  const [newTaskAssignee, setNewTaskAssignee] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const { id } = useParams();
  const router = useRouter();
  const { user } = useUser();

  useEffect(() => {
    async function fetchData() {
      try {
        // Fetch project
        const projectRes = await fetch(`/api/projects/${id}`);
        if (!projectRes.ok) {
          throw new Error("Project not found");
        }
        const projectData = await projectRes.json();
        setProject(projectData);

        // Fetch tasks
        const tasksRes = await fetch(`/api/tasks?projectId=${id}`);
        if (!tasksRes.ok) {
          throw new Error("Failed to fetch tasks");
        }
        const tasksData = await tasksRes.json();
        setTasks(tasksData.map((task: Task) => ({
          ...task,
          id: task.id.split(':')[1] || task.id,
        })));

        // Fetch users
        const usersRes = await fetch('/api/users');
        if (!usersRes.ok) {
          throw new Error("Failed to fetch users");
        }
        const usersData = await usersRes.json();
        setUsers(usersData);

        setLoading(false);
      } catch (err: any) {
        setError(err.message);
        setLoading(false);
      }
    }
    fetchData();
  }, [id]);

  async function handleAddTask(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    try {
      const res = await fetch("/api/tasks", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: newTaskTitle,
          description: newTaskDescription,
          projectId: id,
          deadline: newTaskDeadline,
          assignee: newTaskAssignee,
        }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to create task");
      }
      const newTaskData = await res.json();
      const newTask = Array.isArray(newTaskData) && newTaskData.length > 0 ? newTaskData[0] : newTaskData;
      setTasks([
        ...tasks,
        {
          id: newTask.id ? (newTask.id.split(':')[1] || newTask.id) : `temp_${Date.now()}`,
          title: newTask.title || "Untitled Task",
          description: newTask.description || "",
          status: newTask.status || "pending",
          created_at: newTask.created_at || new Date().toISOString(),
          deadline: newTask.deadline || "",
          assignee: newTask.assignee || "",
          assigneeName: users.find(u => u.id === newTask.assignee)?.name || "Unknown User",
        },
      ]);
      setNewTaskTitle("");
      setNewTaskDescription("");
      setNewTaskDeadline("");
      setNewTaskAssignee("");
    } catch (err: any) {
      setError(err.message);
    }
  }

  async function handleStatusChange(taskId: string, newStatus: string) {
    try {
      const res = await fetch(`/api/tasks/${taskId}/status`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to update task status");
      }
      const updatedTaskData = await res.json();
      const updatedTask = Array.isArray(updatedTaskData) && updatedTaskData.length > 0 ? updatedTaskData[0] : updatedTaskData;
      setTasks(tasks.map(task =>
        task.id === taskId ? { ...task, status: updatedTask.status } : task
      ));
    } catch (err: any) {
      setError(err.message);
    }
  }

  const isAuthor = user && user.id === project?.author;
  const maxDeadline = project?.deadline ? new Date(project.deadline).toISOString().split('T')[0] : '';

  if (loading) {
    return <div className={styles.container}>Loading...</div>;
  }

  if (error) {
    return <div className={styles.container}>{error}</div>;
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>{project?.name}</h1>
        {isAuthor && (
          <button
            className={styles.editButton}
            onClick={() => router.push(`/dashboard/edit-project/${id}`)}
          >
            Edit Project
          </button>
        )}
      </div>
      <div className={styles.infoCard}>
        <p className={styles.summary}><strong>Summary:</strong> {project?.summary}</p>
        <p className={styles.description}><strong>Description:</strong> {project?.description}</p>
        <p className={styles.author}><strong>Author:</strong> {project?.authorName}</p>
        <p className={styles.date}><strong>Created At:</strong> {new Date(project?.created_at || '').toLocaleDateString()}</p>
        <p className={styles.date}><strong>Deadline:</strong> {new Date(project?.deadline || '').toLocaleDateString()}</p>
      </div>
      <h2 className={styles.tasksTitle}>Tasks</h2>
      <div className={styles.tasksContainer}>
        {tasks.length === 0 ? (
          <p className={styles.noTasks}>No tasks yet.</p>
        ) : (
          tasks.map((task) => (
            <div key={task.id} className={styles.taskCard}>
              <h3 className={styles.taskTitle}>{task.title}</h3>
              <p className={styles.taskDescription}>{task.description || 'No description'}</p>
              <p className={styles.taskStatus}><strong>Status:</strong> {task.status}</p>
              <p className={styles.taskDate}><strong>Created At:</strong> {new Date(task.created_at).toLocaleDateString()}</p>
              <p className={styles.taskDate}><strong>Deadline:</strong> {new Date(task.deadline || '').toLocaleDateString()}</p>
              <p className={styles.taskAssignee}><strong>Assignee:</strong> {task.assigneeName}</p>
              {(isAuthor || (user && user.id === task.assignee)) && (
                <div className={styles.statusSelect}>
                  <label className={styles.label}>Change Status</label>
                  <select
                    value={task.status}
                    onChange={(e) => handleStatusChange(task.id, e.target.value)}
                    className={styles.select}
                  >
                    <option value="pending">Pending</option>
                    <option value="in_progress">In Progress</option>
                    <option value="completed">Completed</option>
                  </select>
                </div>
              )}
            </div>
          ))
        )}
      </div>
      {isAuthor && (
        <form onSubmit={handleAddTask} className={styles.taskForm}>
          <h3 className={styles.formTitle}>Add New Task</h3>
          <div className={styles.formGroup}>
            <label className={styles.label}>Task Title</label>
            <input
              type="text"
              value={newTaskTitle}
              onChange={(e) => setNewTaskTitle(e.target.value)}
              className={styles.input}
              required
            />
          </div>
          <div className={styles.formGroup}>
            <label className={styles.label}>Description</label>
            <textarea
              value={newTaskDescription}
              onChange={(e) => setNewTaskDescription(e.target.value)}
              className={styles.textarea}
            />
          </div>
          <div className={styles.formGroup}>
            <label className={styles.label}>Deadline</label>
            <input
              type="date"
              value={newTaskDeadline}
              onChange={(e) => setNewTaskDeadline(e.target.value)}
              className={styles.input}
              max={maxDeadline}
              required
            />
          </div>
          <div className={styles.formGroup}>
            <label className={styles.label}>Assignee</label>
            <select
              value={newTaskAssignee}
              onChange={(e) => setNewTaskAssignee(e.target.value)}
              className={styles.select}
              required
            >
              <option value="">Select a user</option>
              {users.map((user) => (
                <option key={user.id} value={user.id}>{user.name}</option>
              ))}
            </select>
          </div>
          {error && <p className={styles.error}>{error}</p>}
          <button type="submit" className={styles.submitButton}>
            Add Task
          </button>
        </form>
      )}
    </div>
  );
}

app\globals.css
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  background-color: #f7fafc;
}

app\layout.module.css
.container {
  display: flex;
  min-height: 100vh;
  padding-top: 4rem; /* برای جبران فضای هدر ثابت */
}

.main {
  margin-left: 250px;
  width: 100%;
  padding: 2rem;
}

@media (max-width: 768px) {
  .main {
    margin-left: 0;
    padding: 1rem;
  }
}

app\layout.tsx
import './globals.css';
import Header from '../components/Header';
import Sidebar from '../components/Sidebar';
import styles from './layout.module.css';
import { ClerkProvider } from '@clerk/nextjs';

export const metadata = {
  title: 'Task Manager',
  description: 'A simple task management application',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider>

    <html lang="en">
      <body>
        <div className={styles.container}>
          <Header />
          <Sidebar />
          <main className={styles.main}>{children}</main>
        </div>
      </body>
    </html>
    </ClerkProvider>
  );
}

app\page.module.css
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  text-align: center;
  padding: 2rem;
}

.title {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  color: #1a202c;
}

.description {
  font-size: 1.2rem;
  color: #4a5568;
}

app\page.tsx
import { redirect } from 'next/navigation';
import styles from './page.module.css';

export default function Home() {
  // برای تست UI، مستقیم به داشبورد ریدایرکت می‌کنیم
  redirect('/dashboard');

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Welcome to Task Manager</h1>
      <p className={styles.description}>
        Manage your projects and tasks efficiently.
      </p>
    </div>
  );
}

app\project\[id]\page.tsx
"use client";

import TaskCard from '../../../components/TaskCard';
import Form from '../../../components/Form';
import styles from './project.module.css';

interface Task {
  id: string;
  title: string;
  status: string;
  assignedTo: string;
}

const mockTasks: Task[] = [
  { id: '1', title: 'Design UI', status: 'In Progress', assignedTo: 'Jane' },
  { id: '2', title: 'Write API', status: 'To Do', assignedTo: 'John' },
];

const ProjectPage: React.FC = () => {
  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Project: Website Redesign</h1>
      <Form
        onSubmit={(data) => console.log('New Task:', data)}
        submitText="Add Task"
      />
      <div className={styles.taskList}>
        {mockTasks.map((task) => (
          <TaskCard key={task.id} task={task} />
        ))}
      </div>
    </div>
  );
};

export default ProjectPage;

app\project\[id]\project.module.css
.container {
  padding: 2rem;
}

.title {
  font-size: 2rem;
  margin-bottom: 2rem;
  color: #1a202c;
}

.taskList {
  margin-top: 2rem;
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }
}

app\projects\page.tsx
"use client";

import { SignedIn, SignedOut, SignInButton } from "@clerk/nextjs";
import Link from "next/link";
import styles from "./projects.module.css";

interface Project {
  id: string;
  name: string;
  description: string;
  startDate: string;
  taskCount: number;
  status: string;
}

const mockProjects: Project[] = [
  {
    id: "1",
    name: "Website Redesign",
    description: "Redesign company website",
    startDate: "2025-05-01",
    taskCount: 10,
    status: "In Progress",
  },
  {
    id: "2",
    name: "Mobile App",
    description: "Develop mobile app",
    startDate: "2025-04-15",
    taskCount: 5,
    status: "Planned",
  },
];

const ProjectsPage: React.FC = () => {
  return (
    <div className={styles.container}>
      <SignedIn>
        <h1 className={styles.title}>All Projects</h1>
        <table className={styles.table}>
          <thead>
            <tr>
              <th className={styles.th}>Name</th>
              <th className={styles.th}>Description</th>
              <th className={styles.th}>Start Date</th>
              <th className={styles.th}>Tasks</th>
              <th className={styles.th}>Status</th>
              <th className={styles.th}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {mockProjects.map((project) => (
              <tr key={project.id} className={styles.tr}>
                <td className={styles.td}>{project.name}</td>
                <td className={styles.td}>{project.description}</td>
                <td className={styles.td}>{project.startDate}</td>
                <td className={styles.td}>{project.taskCount}</td>
                <td className={styles.td}>{project.status}</td>
                <td className={styles.td}>
                  <Link href={`/project/${project.id}`} className={styles.viewButton}>
                    View
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </SignedIn>
      <SignedOut>
        <div className={styles.signInPrompt}>
          <h2 className={styles.promptTitle}>Please Sign In</h2>
          <p className={styles.promptText}>
            To view tasks and projects, please sign in.
          </p>
          <SignInButton mode="modal">
            <button className={styles.signInButton}>Sign In</button>
          </SignInButton>
        </div>
      </SignedOut>
    </div>
  );
};

export default ProjectsPage;

app\projects\projects.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px); /* Adjust for header height */
}

.title {
  font-size: 2rem;
  margin-bottom: 2rem;
  color: #1a202c;
  font-weight: 700;
}

.table {
  width: 100%;
  border-collapse: collapse;
  background-color: white;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  overflow: hidden;
}

.th {
  padding: 1rem;
  background-color: #2d3748;
  color: white;
  text-align: left;
  font-weight: 600;
}

.td {
  padding: 1rem;
  border-bottom: 1px solid #e2e8f0;
}

.tr:nth-child(even) {
  background-color: #f7fafc;
}

.viewButton {
  display: inline-block;
  background-color: #2b6cb0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.3s ease;
}

.viewButton:hover {
  background-color: #2c5282;
}

.signInPrompt {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  text-align: center;
  padding: 2rem;
  background-color: #f9fafb;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.promptTitle {
  font-size: 1.8rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.promptText {
  font-size: 1.2rem;
  color: #4a5568;
  margin-bottom: 2rem;
}

.signInButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.signInButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .table {
    font-size: 0.9rem;
  }

  .th,
  .td {
    padding: 0.5rem;
  }

  .promptTitle {
    font-size: 1.5rem;
  }

  .promptText {
    font-size: 1rem;
  }
}

components\AuthButtons.tsx
"use client";

import { SignInButton, SignedIn, SignedOut, UserButton, SignUpButton, useUser } from '@clerk/nextjs';
import Link from 'next/link';
import styles from '../styles/authButtons.module.css';

export default function AuthButtons() {
  const { user } = useUser();
  const isAdmin = user?.publicMetadata?.role === 'admin';

  return (
    <div className={styles.authButtons}>
      <SignedIn>
        <div className={styles.authButtons}>
          <Link href="/dashboard">
            <button className={styles.clerkButton}>Dashboard</button>
          </Link>
          <UserButton afterSignOutUrl="/" />
          {isAdmin && (
            <Link href="/admin">
              <button className={styles.clerkButton}>Admin Panel</button>
            </Link>
          )}
        </div>
      </SignedIn>
      <SignedOut>
        <div className={styles.authButtons}>
          <SignInButton mode="modal">
            <button className={styles.clerkButton}>Sign In</button>
          </SignInButton>
          <SignUpButton mode="modal">
            <button className={styles.clerkButton}>Sign Up</button>
          </SignUpButton>
        </div>
      </SignedOut>
    </div>
  );
}

components\Form.tsx
"use client";

import { useState, FormEvent } from 'react';
import styles from '../styles/form.module.css';

interface FormProps {
  onSubmit: (data: { title: string; description: string }) => void;
  initialData?: { title: string; description: string };
  submitText: string;
}

const Form: React.FC<FormProps> = ({ onSubmit, initialData, submitText }) => {
  const [title, setTitle] = useState(initialData?.title || '');
  const [description, setDescription] = useState(initialData?.description || '');

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    onSubmit({ title, description });
  };

  return (
    <form className={styles.form} onSubmit={handleSubmit}>
      <div className={styles.formGroup}>
        <label htmlFor="title" className={styles.label}>Title</label>
        <input
          type="text"
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className={styles.input}
          required
        />
      </div>
      <div className={styles.formGroup}>
        <label htmlFor="description" className={styles.label}>Description</label>
        <textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className={styles.textarea}
          required
        />
      </div>
      <button type="submit" className={styles.submitButton}>
        {submitText}
      </button>
    </form>
  );
};

export default Form;


components\Header.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Menu, X } from 'lucide-react';
import AuthButtons from './AuthButtons';
import styles from '../styles/header.module.css';

const Header: React.FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  return (
    <header className={`${styles.header} ${isScrolled ? styles.scrolled : ''}`}>
      <nav className={styles.nav}>
        <div className={styles.logoContainer}>
          <Image src="/logo.png" alt="Task Manager Logo" width={40} height={40} />
          <h1 className={styles.logoText}>Task Manager</h1>
        </div>

        {/* Desktop Menu */}
        <div className={styles.desktopMenu}>
          <ul className={styles.navList}>
            <li>
              <Link href="/dashboard" className={styles.navLink}>
                Dashboard
              </Link>
            </li>
            <li>
              <Link href="/projects" className={styles.navLink}>
                Projects
              </Link>
            </li>
          </ul>
          <AuthButtons />
        </div>

        {/* Mobile Menu Button */}
        <button className={styles.mobileMenuButton} onClick={toggleMenu}>
          {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
      </nav>

      {/* Mobile Menu */}
      <div className={`${styles.mobileMenu} ${isMenuOpen ? styles.active : ''}`}>
        <div className={styles.mobileMenuContent}>
          <ul className={styles.navList}>
            <li>
              <Link href="/dashboard" className={styles.navLink} onClick={toggleMenu}>
                Dashboard
              </Link>
            </li>
            <li>
              <Link href="/projects" className={styles.navLink} onClick={toggleMenu}>
                Projects
              </Link>
            </li>
          </ul>
          <AuthButtons />
        </div>
      </div>
    </header>
  );
};

export default Header;

components\projectCard.module.css
.card {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-4px);
}

.title {
  font-size: 1.2rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.summary {
  font-size: 0.9rem;
  color: #4a5568;
  margin-bottom: 0.5rem;
  line-height: 1.4;
}

.author {
  font-size: 0.85rem;
  color: #718096;
  margin-bottom: 0.5rem;
}

.viewButton {
  background-color: #4a5568;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
  transition: background-color 0.3s ease;
}

.viewButton:hover {
  background-color: #2d3748;
}

.actions {
  display: flex;
  gap: 1rem;
  margin-top: 0.5rem;
}

.editButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.3s ease;
}

.editButton:hover {
  background-color: #2c5282;
}

.deleteButton {
  background-color: #e53e3e;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.3s ease;
}

.deleteButton:hover {
  background-color: #c53030;
}

.error {
  color: #e53e3e;
  font-size: 0.85rem;
  margin-top: 0.5rem;
}
.card {
  background-color: white;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s;
}

.card:hover {
  transform: translateY(-4px);
}

.title {
  font-size: 1.25rem;
  margin-bottom: 0.5rem;
}

.description {
  color: #4a5568;
  margin-bottom: 1rem;
}

.progress {
  color: #2b6cb0;
  font-weight: bold;
  margin-bottom: 1rem;
}

.viewButton {
  display: inline-block;
  background-color: #2b6cb0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
}

.viewButton:hover {
  background-color: #2c5282;
}
.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  background-color: #f9fafb;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.title {
  font-size: 2.5rem;
  color: #1a202c;
  font-weight: 700;
}

.editButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.editButton:hover {
  background-color: #2c5282;
}

.infoCard {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.summary, .description, .author, .date, .taskAssignee {
  font-size: 1rem;
  color: #4a5568;
  margin-bottom: 0.75rem;
}

.summary strong, .description strong, .author strong, .date strong, .taskAssignee strong {
  color: #2d3748;
}

.tasksTitle {
  font-size: 1.8rem;
  color: #1a202c;
  margin-bottom: 1rem;
}

.tasksContainer {
  display: grid;
  gap: 1rem;
  margin-bottom: 2rem;
}

.taskCard {
  background-color: white;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease;
}

.taskCard:hover {
  transform: translateY(-2px);
}

.taskTitle {
  font-size: 1.2rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
}

.taskDescription {
  font-size: 0.9rem;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.taskStatus, .taskDate, .taskAssignee {
  font-size: 0.85rem;
  color: #718096;
}

.noTasks {
  font-size: 1rem;
  color: #718096;
  text-align: center;
  padding: 1rem;
}

.taskForm {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.formTitle {
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.formGroup {
  margin-bottom: 1rem;
}

.label {
  display: block;
  font-size: 0.9rem;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.input, .textarea, .select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 0.9rem;
  color: #2d3748;
}

.textarea {
  resize: vertical;
  min-height: 80px;
}

.select {
  background-color: white;
  cursor: pointer;
}

.error {
  color: #e53e3e;
  font-size: 0.85rem;
  margin-top: 0.5rem;
}

.submitButton {
  background-color: #38a169;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.submitButton:hover {
  background-color: #2f855a;
}

.statusSelect {
  margin-top: 0.5rem;
}


components\ProjectCard.tsx
import styles from "./projectCard.module.css";
import { useState } from "react";
import { useRouter } from "next/navigation";
import { useUser } from "@clerk/nextjs";

interface Project {
  id: string;
  name: string;
  description: string;
  summary: string;
  created_at: string;
  author: string;
  authorName: string;
}

interface ProjectCardProps {
  project: Project;
  onDelete: (id: string) => void;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ project, onDelete }) => {
  const router = useRouter();
  const { user } = useUser();
  const [error, setError] = useState<string | null>(null);

  const handleDelete = async () => {
    if (!confirm("Are you sure you want to delete this project?")) return;

    try {
      const response = await fetch(`/api/projects/${project.id.split(':')[1]}/delete`, {
        method: "DELETE",
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to delete project");
      }

      onDelete(project.id);
    } catch (err: any) {
      setError(err.message);
    }
  };

  const handleEdit = () => {
    router.push(`/dashboard/edit-project/${project.id.split(':')[1]}`);
  };

  const handleViewDetails = () => {
    router.push(`/dashboard/projects/${project.id.split(':')[1]}`);
  };

  const isAuthor = user && user.id === project.author;

  return (
    <div className={styles.card}>
      <h3 className={styles.title}>{project.name}</h3>
      <p className={styles.summary}>{project.summary}</p>
      <p className={styles.author}>Author: {project.authorName}</p>
      <button className={styles.viewButton} onClick={handleViewDetails}>
        View Details
      </button>
      {error && <p className={styles.error}>{error}</p>}
      {isAuthor && (
        <div className={styles.actions}>
          <button className={styles.editButton} onClick={handleEdit}>
            Edit
          </button>
          <button className={styles.deleteButton} onClick={handleDelete}>
            Delete
          </button>
        </div>
      )}
    </div>
  );
};

export default ProjectCard;

components\Sidebar.tsx
"use client"; // اضافه کردن این خط

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import styles from '../styles/sidebar.module.css';

const Sidebar: React.FC = () => {
  const pathname = usePathname();

  return (
    <aside className={styles.sidebar}>
      <nav>
        <ul className={styles.navList}>
          <li>
            <Link
              href="/dashboard"
              className={`${styles.navLink} ${pathname === '/dashboard' ? styles.active : ''}`}
            >
              Dashboard
            </Link>
          </li>
          <li>
            <Link
              href="/projects"
              className={`${styles.navLink} ${pathname === '/projects' ? styles.active : ''}`}
            >
              Projects
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
};

export default Sidebar;

components\TaskCard.tsx
import styles from '../styles/taskCard.module.css';

interface Task {
  id: string;
  title: string;
  status: string;
  assignedTo: string;
}

interface TaskCardProps {
  task: Task;
}

const TaskCard: React.FC<TaskCardProps> = ({ task }) => {
  return (
    <div className={styles.card}>
      <h4 className={styles.title}>{task.title}</h4>
      <p className={styles.status}>Status: {task.status}</p>
      <p className={styles.assigned}>Assigned to: {task.assignedTo}</p>
    </div>
  );
};

export default TaskCard;

export-code.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FILE = "project-code.txt";
const targetExtensions = [".js", ".jsx", ".ts", ".tsx", ".json", ".css"];

function readFilesRecursively(dir, output = []) {
  const items = fs.readdirSync(dir);

  items.forEach(item => {
    const fullPath = path.join(dir, item);
    const stats = fs.statSync(fullPath);

    if (stats.isDirectory()) {
      if (item === "node_modules" || item.startsWith(".")) return;
      readFilesRecursively(fullPath, output);
    } else {
      const ext = path.extname(item);
      if (targetExtensions.includes(ext)) {
        const content = fs.readFileSync(fullPath, "utf8");
        const relativePath = path.relative(__dirname, fullPath);
        output.push(`${relativePath}\n${content}\n`);
      }
    }
  });

  return output;
}

const result = readFilesRecursively(__dirname);
fs.writeFileSync(OUTPUT_FILE, result.join("\n"), "utf8");

console.log(`✅ All code exported to ${OUTPUT_FILE}`);

lib\surrealdb.ts
import { Surreal } from 'surrealdb';

const db = new Surreal();
let isConnected = false;

export const connectDB = async () => {
  if (isConnected) return;
  try {
    await db.connect('ws://127.0.0.1:8000', {
      namespace: "test",
      database: "test",
      auth: {
        username: "root",
        password: "root",
      }
    });
    isConnected = true;
    console.log('Connect Shodid');
  } catch (error) {
    console.log('Connect Nashodid', error);
  }
};

export default db;

middleware.ts
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

// مسیرهای خصوصی که نیاز به لاگین دارن
const isPrivateRoute = createRouteMatcher([
  "/project/(.*)",
]);

export default clerkMiddleware(async (auth, request) => {
  if (isPrivateRoute(request)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    "/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
    // Always run for API routes
    "/(api|trpc)(.*)",
  ],
};

next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


package-lock.json
{
  "name": "taskmanager",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "taskmanager",
      "version": "0.1.0",
      "dependencies": {
        "@clerk/nextjs": "^6.20.2",
        "lucide-react": "^0.511.0",
        "next": "15.3.3",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "surrealdb": "^1.3.2"
      },
      "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        "typescript": "^5"
      }
    },
    "node_modules/@clerk/backend": {
      "version": "1.34.0",
      "resolved": "https://registry.npmjs.org/@clerk/backend/-/backend-1.34.0.tgz",
      "integrity": "sha512-9rZ8hQJVpX5KX2bEpiuVXfpjhojQCiqCWADJDdCI0PCeKxn58Ep0JPYiIcczg4VKUc3a7jve9vXylykG2XajLQ==",
      "license": "MIT",
      "dependencies": {
        "@clerk/shared": "^3.9.5",
        "@clerk/types": "^4.59.3",
        "cookie": "1.0.2",
        "snakecase-keys": "8.0.1",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "svix": "^1.62.0"
      },
      "peerDependenciesMeta": {
        "svix": {
          "optional": true
        }
      }
    },
    "node_modules/@clerk/clerk-react": {
      "version": "5.31.8",
      "resolved": "https://registry.npmjs.org/@clerk/clerk-react/-/clerk-react-5.31.8.tgz",
      "integrity": "sha512-GPhOdI7drAaamiKIhzfWiOVe4zw4wUi1sKp6khgUzcjr9hRopdZvzMts0fU+XLHFnYUSX8IPw4c0CDXY1wBKuw==",
      "license": "MIT",
      "dependencies": {
        "@clerk/shared": "^3.9.5",
        "@clerk/types": "^4.59.3",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      }
    },
    "node_modules/@clerk/nextjs": {
      "version": "6.20.2",
      "resolved": "https://registry.npmjs.org/@clerk/nextjs/-/nextjs-6.20.2.tgz",
      "integrity": "sha512-rBtAdx2PFxexBDU41GEmEQwSsfbTU7J7OVBKRtmXAXFMYdknGNw41674sFBTaG+wjbTYrhW7wsXcyphEUyVMoQ==",
      "license": "MIT",
      "dependencies": {
        "@clerk/backend": "^1.34.0",
        "@clerk/clerk-react": "^5.31.8",
        "@clerk/shared": "^3.9.5",
        "@clerk/types": "^4.59.3",
        "server-only": "0.0.1",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "next": "^13.5.7 || ^14.2.25 || ^15.2.3",
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      }
    },
    "node_modules/@clerk/shared": {
      "version": "3.9.5",
      "resolved": "https://registry.npmjs.org/@clerk/shared/-/shared-3.9.5.tgz",
      "integrity": "sha512-KeIug5qV4LnzZD+16SLkJvdONPs2HQ7I1A7jbHYOGB37vQrQrus64Wu5XeNzbWFTN1Z5fAPSGuja8MfT2cBT4A==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@clerk/types": "^4.59.3",
        "dequal": "2.0.3",
        "glob-to-regexp": "0.4.1",
        "js-cookie": "3.0.5",
        "std-env": "^3.9.0",
        "swr": "^2.3.3"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@clerk/types": {
      "version": "4.59.3",
      "resolved": "https://registry.npmjs.org/@clerk/types/-/types-4.59.3.tgz",
      "integrity": "sha512-xwOO/hfABzbFr3f1RaVXHsDDQ0+jYpm84GiaUDxo+mLsYUgD9f2GmGjKkgWybXzvsBsgZlycSwRXkeDD6utFqg==",
      "license": "MIT",
      "dependencies": {
        "csstype": "3.1.3"
      },
      "engines": {
        "node": ">=18.17.0"
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@img/sharp-darwin-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.2.tgz",
      "integrity": "sha512-OfXHZPppddivUJnqyKoi5YVeHRkkNE2zUFT2gbpKxp/JZCFYEYubnMg+gOp6lWfasPrTS+KPosKqdI+ELYVDtg==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-darwin-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz",
      "integrity": "sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
      "cpu": [
        "arm"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-ppc64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-s390x": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
      "cpu": [
        "s390x"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-linux-arm": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.2.tgz",
      "integrity": "sha512-0DZzkvuEOqQUP9mo2kjjKNok5AmnOr1jB2XYjkaoNRwpAYMDzRmAqUIa1nRi58S2WswqSfPOWLNOr0FDT3H5RQ==",
      "cpu": [
        "arm"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.2.tgz",
      "integrity": "sha512-D8n8wgWmPDakc83LORcfJepdOSN6MvWNzzz2ux0MnIbOqdieRZwVYY32zxVx+IFUT8er5KPcyU3XXsn+GzG/0Q==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-s390x": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.2.tgz",
      "integrity": "sha512-EGZ1xwhBI7dNISwxjChqBGELCWMGDvmxZXKjQRuqMrakhO8QoMgqCrdjnAqJq/CScxfRn+Bb7suXBElKQpPDiw==",
      "cpu": [
        "s390x"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-s390x": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz",
      "integrity": "sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.2.tgz",
      "integrity": "sha512-NEE2vQ6wcxYav1/A22OOxoSOGiKnNmDzCYFOZ949xFmrWZOVII1Bp3NqVVpvj+3UeHMFyN5eP/V5hzViQ5CZNA==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz",
      "integrity": "sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-wasm32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.2.tgz",
      "integrity": "sha512-/VI4mdlJ9zkaq53MbIG6rZY+QRN3MLbR6usYlgITEzi4Rpx5S6LFKsycOQjkOGmqTNmkIdLjEvooFKwww6OpdQ==",
      "cpu": [
        "wasm32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/runtime": "^1.4.3"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.2.tgz",
      "integrity": "sha512-cfP/r9FdS63VA5k0xiqaNaEoGxBg9k7uE+RQGzuK9fHt7jib4zAVVseR9LsE4gJcNWgT6APKMNnCcnyOtmSEUQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-ia32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.2.tgz",
      "integrity": "sha512-QLjGGvAbj0X/FXl8n1WbtQ6iVBpWU7JO94u/P2M4a8CFYsvQi4GW2mRy/JqkRx0qpBzaOdKJKw8uc930EX2AHw==",
      "cpu": [
        "ia32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.2.tgz",
      "integrity": "sha512-aUdT6zEYtDKCaxkofmmJDJYGCf0+pJg3eU9/oBuqvEeoB9dKI6ZLc/1iLJCTuJQDO4ptntAlkUmHgGjyuobZbw==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@next/env": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.3.tgz",
      "integrity": "sha512-OdiMrzCl2Xi0VTjiQQUK0Xh7bJHnOuET2s+3V+Y40WJBAXrJeGA3f+I8MZJ/YQ3mVGi5XGR1L66oFlgqXhQ4Vw==",
      "license": "MIT"
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.3.tgz",
      "integrity": "sha512-WRJERLuH+O3oYB4yZNVahSVFmtxRNjNF1I1c34tYMoJb0Pve+7/RaLAJJizyYiFhjYNGHRAE1Ri2Fd23zgDqhg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.3.tgz",
      "integrity": "sha512-XHdzH/yBc55lu78k/XwtuFR/ZXUTcflpRXcsu0nKmF45U96jt1tsOZhVrn5YH+paw66zOANpOnFQ9i6/j+UYvw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.3.tgz",
      "integrity": "sha512-VZ3sYL2LXB8znNGcjhocikEkag/8xiLgnvQts41tq6i+wql63SMS1Q6N8RVXHw5pEUjiof+II3HkDd7GFcgkzw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.3.tgz",
      "integrity": "sha512-h6Y1fLU4RWAp1HPNJWDYBQ+e3G7sLckyBXhmH9ajn8l/RSMnhbuPBV/fXmy3muMcVwoJdHL+UtzRzs0nXOf9SA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.3.tgz",
      "integrity": "sha512-jJ8HRiF3N8Zw6hGlytCj5BiHyG/K+fnTKVDEKvUCyiQ/0r5tgwO7OgaRiOjjRoIx2vwLR+Rz8hQoPrnmFbJdfw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.3.tgz",
      "integrity": "sha512-HrUcTr4N+RgiiGn3jjeT6Oo208UT/7BuTr7K0mdKRBtTbT4v9zJqCDKO97DUqqoBK1qyzP1RwvrWTvU6EPh/Cw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.3.tgz",
      "integrity": "sha512-SxorONgi6K7ZUysMtRF3mIeHC5aA3IQLmKFQzU0OuhuUYwpOBc1ypaLJLP5Bf3M9k53KUUUj4vTPwzGvl/NwlQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.3.tgz",
      "integrity": "sha512-4QZG6F8enl9/S2+yIiOiju0iCTFd93d8VC1q9LZS4p/Xuk81W2QDjCFeoogmrWWkAD59z8ZxepBQap2dKS5ruw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@swc/counter": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@types/node": {
      "version": "20.17.57",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.57.tgz",
      "integrity": "sha512-f3T4y6VU4fVQDKVqJV4Uppy8c1p/sVvS3peyqxyWnzkqXFJLRU7Y1Bl7rMS1Qe9z0v4M6McY0Fp9yBsgHJUsWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.19.2"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.6.tgz",
      "integrity": "sha512-JeG0rEWak0N6Itr6QUx+X60uQmN+5t3j9r/OVDtWzFXKaj6kD1BwJzOksD0FF6iWxZlbE1kB0q9vtnU2ekqa1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.5",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.5.tgz",
      "integrity": "sha512-CMCjrWucUBZvohgZxkjd6S9h0nZxXjzus6yDfUb+xLxYM7VvjKNH1tQrE9GWLql1XoOP4/Ds3bwFqShHUYraGg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001720",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001720.tgz",
      "integrity": "sha512-Ec/2yV2nNPwb4DnTANEV99ZWwm3ZWfdlfkQbWSDDt+PsXEVYwlhPH8tdMaPunYTKKmz7AnHi2oNEi1GcmKCD8g==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/dequal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/isows": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/isows/-/isows-1.0.7.tgz",
      "integrity": "sha512-I1fSfDCZL5P0v33sVqeTDSpcstAg/N+wF5HS033mogOVIp4B+oHC7oOCsA3axAbBSGTJ8QubbNmnIRN/h8U7hg==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/wevm"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/js-cookie": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.5.tgz",
      "integrity": "sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.511.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.511.0.tgz",
      "integrity": "sha512-VK5a2ydJ7xm8GvBeKLS9mu1pVK6ucef9780JVUjw6bAjJL/QXnd4Y0p7SPeOUMC27YhzNCZvm5d/QX0Tp3rc0w==",
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/map-obj": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/map-obj/-/map-obj-4.3.0.tgz",
      "integrity": "sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/next": {
      "version": "15.3.3",
      "resolved": "https://registry.npmjs.org/next/-/next-15.3.3.tgz",
      "integrity": "sha512-JqNj29hHNmCLtNvd090SyRbXJiivQ+58XjCcrC50Crb5g5u2zi7Y2YivbsEfzk6AtVI80akdOQbaMZwWB1Hthw==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "15.3.3",
        "@swc/counter": "0.1.3",
        "@swc/helpers": "0.5.15",
        "busboy": "1.6.0",
        "caniuse-lite": "^1.0.30001579",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.6"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "15.3.3",
        "@next/swc-darwin-x64": "15.3.3",
        "@next/swc-linux-arm64-gnu": "15.3.3",
        "@next/swc-linux-arm64-musl": "15.3.3",
        "@next/swc-linux-x64-gnu": "15.3.3",
        "@next/swc-linux-x64-musl": "15.3.3",
        "@next/swc-win32-arm64-msvc": "15.3.3",
        "@next/swc-win32-x64-msvc": "15.3.3",
        "sharp": "^0.34.1"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "@playwright/test": "^1.41.2",
        "babel-plugin-react-compiler": "*",
        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@playwright/test": {
          "optional": true
        },
        "babel-plugin-react-compiler": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "optional": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/server-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/server-only/-/server-only-0.0.1.tgz",
      "integrity": "sha512-qepMx2JxAa5jjfzxG79yPPq+8BuFToHd1hm7kI+Z4zAq1ftQiP7HcxMhDDItrbtwVeLg/cY2JnKnrcFkmiswNA==",
      "license": "MIT"
    },
    "node_modules/sharp": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.2.tgz",
      "integrity": "sha512-lszvBmB9QURERtyKT2bNmsgxXK0ShJrL/fvqlonCo7e6xBF8nT8xU6pW+PMIbLsz0RxQk3rgH9kd8UmvOzlMJg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.4",
        "semver": "^7.7.2"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.34.2",
        "@img/sharp-darwin-x64": "0.34.2",
        "@img/sharp-libvips-darwin-arm64": "1.1.0",
        "@img/sharp-libvips-darwin-x64": "1.1.0",
        "@img/sharp-libvips-linux-arm": "1.1.0",
        "@img/sharp-libvips-linux-arm64": "1.1.0",
        "@img/sharp-libvips-linux-ppc64": "1.1.0",
        "@img/sharp-libvips-linux-s390x": "1.1.0",
        "@img/sharp-libvips-linux-x64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
        "@img/sharp-linux-arm": "0.34.2",
        "@img/sharp-linux-arm64": "0.34.2",
        "@img/sharp-linux-s390x": "0.34.2",
        "@img/sharp-linux-x64": "0.34.2",
        "@img/sharp-linuxmusl-arm64": "0.34.2",
        "@img/sharp-linuxmusl-x64": "0.34.2",
        "@img/sharp-wasm32": "0.34.2",
        "@img/sharp-win32-arm64": "0.34.2",
        "@img/sharp-win32-ia32": "0.34.2",
        "@img/sharp-win32-x64": "0.34.2"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/snake-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/snakecase-keys": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/snakecase-keys/-/snakecase-keys-8.0.1.tgz",
      "integrity": "sha512-Sj51kE1zC7zh6TDlNNz0/Jn1n5HiHdoQErxO8jLtnyrkJW/M5PrI7x05uDgY3BO7OUQYKCvmeMurW6BPUdwEOw==",
      "license": "MIT",
      "dependencies": {
        "map-obj": "^4.1.0",
        "snake-case": "^3.0.4",
        "type-fest": "^4.15.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/std-env": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
      "license": "MIT"
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/surrealdb": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/surrealdb/-/surrealdb-1.3.2.tgz",
      "integrity": "sha512-mL7nij33iuon3IQP72F46fgX3p2LAxFCWCBDbZB7IohZ13RTEwJVNq7nZeP1eMSceQUpKzS6OHIWOuF9LYAkNw==",
      "license": "Apache-2.0",
      "dependencies": {
        "isows": "^1.0.6",
        "uuidv7": "^1.0.1"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "peerDependencies": {
        "tslib": "^2.6.3",
        "typescript": "^5.0.0"
      }
    },
    "node_modules/swr": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/swr/-/swr-2.3.3.tgz",
      "integrity": "sha512-dshNvs3ExOqtZ6kJBaAsabhPdHyeY4P2cKwRCniDVifBMoG/SVI7tfLWqPXriVspf2Rg4tPzXJTnwaihIeFw2A==",
      "license": "MIT",
      "dependencies": {
        "dequal": "^2.0.3",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "react": "^16.11.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-fest": {
      "version": "4.41.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz",
      "integrity": "sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.19.8",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/uuidv7": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/uuidv7/-/uuidv7-1.0.2.tgz",
      "integrity": "sha512-8JQkH4ooXnm1JCIhqTMbtmdnYEn6oKukBxHn1Ic9878jMkL7daTI7anTExfY18VRCX7tcdn5quzvCb6EWrR8PA==",
      "license": "Apache-2.0",
      "bin": {
        "uuidv7": "cli.js"
      }
    },
    "node_modules/ws": {
      "version": "8.18.2",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.2.tgz",
      "integrity": "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}


package.json
{
  "name": "taskmanager",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.20.2",
    "lucide-react": "^0.511.0",
    "next": "15.3.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "surrealdb": "^1.3.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "typescript": "^5"
  }
}


styles\authButtons.module.css
.authButtons {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.clerkButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.clerkButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

styles\dashboard.module.css
.container {
  padding: 2rem;
  max-width: 1400px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
  background-color: #f5f7fa;
  font-family: 'Inter', sans-serif;
}

.title {
  font-size: 2.25rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 2rem;
  text-align: left;
}

.projectsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
  gap: 1.5rem;
  max-width: 100%;
}

.addProjectCard {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(145deg, #ffffff, #f1f5f9);
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  cursor: pointer;
  height: 320px;
}

.addProjectCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
  background: linear-gradient(145deg, #f1f5f9, #ffffff);
}

.addIcon {
  color: #3b82f6;
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.addText {
  color: #1f2937;
  font-size: 1.1rem;
  font-weight: 600;
}

.noProjects {
  font-size: 1.25rem;
  color: #6b7280;
  text-align: center;
  padding: 3rem;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

@media (max-width: 1024px) {
  .projectsGrid {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .title {
    font-size: 1.75rem;
  }

  .addProjectCard {
    padding: 1.5rem;
    height: 300px;
  }

  .addText {
    font-size: 1rem;
  }
}

styles\form.module.css

.form {
  max-width: 500px;
  margin: 0 auto;
  padding: 1rem;
}

.formGroup {
  margin-bottom: 1rem;
}

.label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
}

.input,
.textarea {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #e2e8f0;
  border-radius: 4px;
  font-size: 1rem;
}

.textarea {
  min-height: 100px;
}

.submitButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.submitButton:hover {
  background-color: #2c5282;
}


styles\header.module.css
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  background-color: #1a202c;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
  box-sizing: border-box;
  transition: background-color 0.3s ease;
}

.header.scrolled {
  background-color: #2d3748;
}

.logoContainer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logoText {
  font-size: 1.5rem;
  font-weight: 700;
  letter-spacing: 1px;
}

.nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.navList {
  list-style: none;
  display: flex;
  gap: 1.5rem;
  margin: 0;
  padding: 0;
}

.navLink {
  color: white;
  text-decoration: none;
  font-size: 1rem;
  transition: color 0.3s ease;
}

.navLink:hover {
  color: #63b3ed;
}

.desktopMenu {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.mobileMenuButton {
  display: none;
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
}

.mobileMenu {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: #2d3748;
  padding: 1rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

.mobileMenu.active {
  display: block;
}

.mobileMenuContent {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

@media (max-width: 768px) {
  .desktopMenu {
    display: none;
  }

  .mobileMenuButton {
    display: block;
  }

  .navList {
    flex-direction: column;
    gap: 1rem;
  }

  .navLink {
    font-size: 1.1rem;
    padding: 0.5rem;
  }
}

styles\newProject.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
}

.title {
  font-size: 2rem;
  color: #1a202c;
  font-weight: 700;
  margin-bottom: 1.5rem;
}

.form {
  max-width: 600px;
  background-color: #f9fafb;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.formGroup {
  margin-bottom: 1.5rem;
}

.label {
  display: block;
  font-size: 1rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.input,
.textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #cbd5e0;
  border-radius: 6px;
  font-size: 1rem;
  color: #2d3748;
  transition: border-color 0.3s ease;
}

.input:focus,
.textarea:focus {
  border-color: #2b6cb0;
  outline: none;
}

.textarea {
  min-height: 100px;
  resize: vertical;
}

.error {
  color: #e53e3e;
  font-size: 0.9rem;
  margin-bottom: 1rem;
}

.submitButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.submitButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

.submitButton:disabled {
  background-color: #a0aec0;
  cursor: not-allowed;
  transform: none;
}

.signInPrompt {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  text-align: center;
  padding: 2rem;
  background-color: #f9fafb;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.promptTitle {
  font-size: 1.8rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.promptText {
  font-size: 1.2rem;
  color: #4a5568;
  margin-bottom: 2rem;
}

.signInButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.signInButton:hover {
  background-color: #2c5282;
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .form {
    padding: 1.5rem;
  }

  .title {
    font-size: 1.8rem;
  }

  .promptTitle {
    font-size: 1.5rem;
  }

  .promptText {
    font-size: 1rem;
  }
}

styles\projectCard.module.css
.card {
  background: linear-gradient(145deg, #ffffff, #f8fafc);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  height: 320px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  font-family: 'Inter', sans-serif;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
}

.title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 0.75rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.summary {
  font-size: 1rem;
  color: #4b5563;
  margin-bottom: 0.75rem;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
  flex-grow: 1;
}

.meta {
  font-size: 0.875rem;
  color: #6b7280;
  margin-bottom: 0.5rem;
}

.meta strong {
  color: #1f2937;
}

.buttonGroup {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  margin-top: auto;
}

.viewButton {
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 600;
  background-color: #3b82f6;
  color: white;
  transition: all 0.2s ease;
}

.viewButton:hover {
  background-color: #2563eb;
  transform: translateY(-2px);
}

.actionButtons {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.editButton, .deleteButton {
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 600;
  width: 100px;
  text-align: center;
  transition: all 0.2s ease;
}

.editButton {
  background-color: #10b981;
  color: white;
}

.editButton:hover {
  background-color: #059669;
  transform: translateY(-2px);
}

.deleteButton {
  background-color: #ef4444;
  color: white;
}

.deleteButton:hover {
  background-color: #dc2626;
  transform: translateY(-2px);
}

styles\projectDetails.module.css
.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  background-color: #f9fafb;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.title {
  font-size: 2.5rem;
  color: #1a202c;
  font-weight: 700;
}

.editButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.editButton:hover {
  background-color: #2c5282;
}

.infoCard {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.summary, .description, .author, .date, .taskAssignee {
  font-size: 1rem;
  color: #4a5568;
  margin-bottom: 0.75rem;
}

.summary strong, .description strong, .author strong, .date strong, .taskAssignee strong {
  color: #2d3748;
}

.tasksTitle {
  font-size: 1.8rem;
  color: #1a202c;
  margin-bottom: 1rem;
}

.tasksContainer {
  display: grid;
  gap: 1rem;
  margin-bottom: 2rem;
}

.taskCard {
  background-color: white;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease;
}

.taskCard:hover {
  transform: translateY(-2px);
}

.taskTitle {
  font-size: 1.2rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
}

.taskDescription {
  font-size: 0.9rem;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.taskStatus, .taskDate, .taskAssignee {
  font-size: 0.85rem;
  color: #718096;
}

.noTasks {
  font-size: 1rem;
  color: #718096;
  text-align: center;
  padding: 1rem;
}

.taskForm {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.formTitle {
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.formGroup {
  margin-bottom: 1rem;
}

.label {
  display: block;
  font-size: 0.9rem;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.input, .textarea, .select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 0.9rem;
  color: #2d3748;
}

.textarea {
  resize: vertical;
  min-height: 80px;
}

.select {
  background-color: white;
  cursor: pointer;
}

.error {
  color: #e53e3e;
  font-size: 0.85rem;
  margin-top: 0.5rem;
}

.submitButton {
  background-color: #38a169;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.submitButton:hover {
  background-color: #2f855a;
}

.statusSelect {
  margin-top: 0.5rem;
}

styles\projectDetails.module​​.css
.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  background-color: #f9fafb;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.title {
  font-size: 2.5rem;
  color: #1a202c;
  font-weight: 700;
}

.editButton {
  background-color: #2b6cb0;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.editButton:hover {
  background-color: #2c5282;
}

.infoCard {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.summary, .description, .author, .date, .taskAssignee {
  font-size: 1rem;
  color: #4a5568;
  margin-bottom: 0.75rem;
}

.summary strong, .description strong, .author strong, .date strong, .taskAssignee strong {
  color: #2d3748;
}

.tasksTitle {
  font-size: 1.8rem;
  color: #1a202c;
  margin-bottom: 1rem;
}

.tasksContainer {
  display: grid;
  gap: 1rem;
  margin-bottom: 2rem;
}

.taskCard {
  background-color: white;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease;
}

.taskCard:hover {
  transform: translateY(-2px);
}

.taskTitle {
  font-size: 1.2rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
}

.taskDescription {
  font-size: 0.9rem;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.taskStatus, .taskDate, .taskAssignee {
  font-size: 0.85rem;
  color: #718096;
}

.noTasks {
  font-size: 1rem;
  color: #718096;
  text-align: center;
  padding: 1rem;
}

.taskForm {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.formTitle {
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 1rem;
}

.formGroup {
  margin-bottom: 1rem;
}

.label {
  display: block;
  font-size: 0.9rem;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.input, .textarea, .select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 0.9rem;
  color: #2d3748;
}

.textarea {
  resize: vertical;
  min-height: 80px;
}

.select {
  background-color: white;
  cursor: pointer;
}

.error {
  color: #e53e3e;
  font-size: 0.85rem;
  margin-top: 0.5rem;
}

.submitButton {
  background-color: #38a169;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.submitButton:hover {
  background-color: #2f855a;
}

.statusSelect {
  margin-top: 0.5rem;
}

styles\sidebar.module.css
.sidebar {
  width: 250px;
  background-color: #2d3748;
  color: white;
  height: 100vh;
  padding: 1rem;
  position: fixed;
  top: 4rem; /* برای جبران هدر ثابت */
  left: 0;
}

.navList {
  list-style: none;
  padding: 0;
}

.navLink {
  display: block;
  padding: 0.5rem;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  margin-bottom: 0.5rem;
}

.navLink:hover {
  background-color: #4a5568;
}

.active {
  background-color: #4a5568;
  font-weight: bold;
}

@media (max-width: 768px) {
  .sidebar {
    display: none; /* توی موبایل با منوی هدر جایگزین می‌شه */
  }
}

styles\taskCard.module.css
.card {
  background-color: white;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 1rem;
}

.title {
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
}

.status {
  color: #2b6cb0;
  margin-bottom: 0.5rem;
}

.assigned {
  color: #4a5568;
}

tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

